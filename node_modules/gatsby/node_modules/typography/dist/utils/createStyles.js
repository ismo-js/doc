'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _modularscale = require('modularscale');

var _modularscale2 = _interopRequireDefault(_modularscale);

var _typographyNormalize = require('typography-normalize');

var _typographyNormalize2 = _interopRequireDefault(_typographyNormalize);

var _grayPercentage = require('gray-percentage');

var _grayPercentage2 = _interopRequireDefault(_grayPercentage);

var _decamelize = require('decamelize');

var _decamelize2 = _interopRequireDefault(_decamelize);

var _set = require('lodash/set');

var _set2 = _interopRequireDefault(_set);

var _forEach = require('lodash/forEach');

var _forEach2 = _interopRequireDefault(_forEach);

var _reduce = require('lodash/reduce');

var _reduce2 = _interopRequireDefault(_reduce);

var _isArray = require('lodash/isArray');

var _isArray2 = _interopRequireDefault(_isArray);

var _isNumber = require('lodash/isNumber');

var _isNumber2 = _interopRequireDefault(_isNumber);

var _isString = require('lodash/isString');

var _isString2 = _interopRequireDefault(_isString);

var _isObject = require('lodash/isObject');

var _isObject2 = _interopRequireDefault(_isObject);

var _isFunction = require('lodash/isFunction');

var _isFunction2 = _interopRequireDefault(_isFunction);

var _merge = require('lodash/merge');

var _merge2 = _interopRequireDefault(_merge);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var generateFontFaceRules = function generateFontFaceRules(vr, options) {
  var styles = '';
  var properties = '';

  // Return if there's no font-faces defined.
  if (options.fontFaces == null || options.fontFaces.length <= 0) {
    return styles;
  }
  for (var i = 0; i < options.fontFaces.length; i++) {
    var fontFace = options.fontFaces[i];
    var srcs = fontFace.src.map(function (s) {
      return 'src:' + s + ';';
    });
    (0, _forEach2.default)(fontFace, function (v, k) {
      // eslint-disable-line
      if (k !== 'src') {
        properties += (0, _decamelize2.default)(k, '-') + ':' + v + ';\n';
      }
    });
    styles += '@font-face {\n  ' + properties + '\n  ' + srcs.join('\n') + '\n}';
  }

  return styles;
};

var setStyles = function setStyles() {
  var styles = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
  var els = arguments[1];
  var rules = arguments[2];

  var elements = void 0;
  if (!(0, _isArray2.default)(els)) {
    elements = [els];
  } else {
    elements = els;
  }
  (0, _forEach2.default)(elements, function (element) {
    (0, _forEach2.default)(rules, function (value, prop) {
      (0, _set2.default)(styles, element + '.' + prop, value);
    });
  });
  return styles;
};

var compileStyles = function compileStyles(styles) {
  return (0, _reduce2.default)(styles, function (stylesStr, ruleSet, selector) {
    stylesStr += selector + '{'; // eslint-disable-line
    (0, _forEach2.default)(ruleSet, function (value, property) {
      if ((0, _isObject2.default)(value)) {
        var newObject = {};
        newObject[property] = value;
        stylesStr += compileStyles(newObject); // eslint-disable-line
      } else {
          stylesStr += (0, _decamelize2.default)(property, '-') + ':' + value + ';'; // eslint-disable-line
        }
    });
    stylesStr += '}'; // eslint-disable-line
    return stylesStr;
  }, '');
};

module.exports = function (vr, options) {
  var styles = {};

  // Base HTML styles.
  styles = setStyles(styles, 'html', _extends({}, vr.establishBaseline(), {
    boxSizing: 'border-box',
    overflowY: 'scroll'
  }));

  // box-sizing reset.
  styles = setStyles(styles, ['*', '*:before', '*:after'], {
    boxSizing: 'inherit'
  });

  // Base body styles.
  styles = setStyles(styles, 'body', {
    color: (0, _grayPercentage2.default)(options.bodyGray, options.bodyGrayHue),
    fontFamily: options.bodyFontFamily.join(','),
    fontWeight: options.bodyWeight,
    wordWrap: 'break-word'
  });

  // Make images responsive.
  styles = setStyles(styles, 'img', {
    maxWidth: '100%'
  });

  // All block elements get one rhythm of bottom margin by default
  // or whatever is passed in as option.
  var blockMarginBottom = void 0;
  if ((0, _isNumber2.default)(options.blockMarginBottom)) {
    blockMarginBottom = vr.rhythm(options.blockMarginBottom);
  } else if ((0, _isString2.default)(options.blockMarginBottom)) {
    blockMarginBottom = options.blockMarginBottom;
  } else {
    blockMarginBottom = vr.rhythm(1);
  }
  styles = setStyles(styles, ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'hgroup', 'ul', 'ol', 'dl', 'dd', 'p', 'figure', 'pre', 'table', 'fieldset', 'blockquote', 'form', 'noscript', 'iframe', 'img', 'hr', 'address'], {

    // Reset margin/padding to 0.
    margin: 0,
    padding: 0,
    marginBottom: blockMarginBottom
  });

  // Basic blockquote styles.
  styles = setStyles(styles, 'blockquote', {
    marginRight: vr.rhythm(1),
    marginBottom: vr.rhythm(1),
    marginLeft: vr.rhythm(1)
  });

  // b, strong.
  styles = setStyles(styles, ['b', 'strong', 'dt', 'th'], {
    fontWeight: options.boldWeight
  });

  // hr.
  styles = setStyles(styles, 'hr', {
    background: (0, _grayPercentage2.default)(80, options.bodyGrayHue),
    border: 'none',
    height: '1px',
    marginBottom: 'calc(' + vr.rhythm(1) + ' - 1px)'
  });

  // ol, ul.
  styles = setStyles(styles, ['ol', 'ul'], {
    listStylePosition: 'outside',
    listStyleImage: 'none',
    marginLeft: vr.rhythm(1)
  });

  // li.
  styles = setStyles(styles, 'li', {
    marginBottom: vr.rhythm(1 / 2)
  });

  // Remove default padding on list items.
  styles = setStyles(styles, ['ol li', 'ul li'], {
    paddingLeft: 0
  });

  // children ol, ul.
  styles = setStyles(styles, ['li > ol', 'li > ul'], {
    marginLeft: vr.rhythm(1),
    marginBottom: vr.rhythm(1 / 2),
    marginTop: vr.rhythm(1 / 2)
  });

  // Make generally smaller elements, smaller.
  styles = setStyles(styles, ['code', 'kbd', 'pre', 'samp'], _extends({}, vr.adjustFontSizeTo('85%')));

  // Abbr, Acronym.
  styles = setStyles(styles, ['abbr', 'acronym'], {
    borderBottom: '1px dotted ' + (0, _grayPercentage2.default)(50),
    cursor: 'help'
  });
  styles['abbr[title]'] = {
    borderBottom: '1px dotted ' + (0, _grayPercentage2.default)(50),
    cursor: 'help',
    textDecoration: 'none'
  };

  // Table styles.
  styles = setStyles(styles, ['table'], _extends({}, vr.adjustFontSizeTo(options.baseFontSize), {
    borderCollapse: 'collapse',
    width: '100%'
  }));
  styles = setStyles(styles, ['thead'], {
    textAlign: 'left'
  });
  styles = setStyles(styles, ['td,th'], {
    textAlign: 'left',
    borderBottom: '1px solid ' + (0, _grayPercentage2.default)(88),
    paddingLeft: vr.rhythm(2 / 3),
    paddingRight: vr.rhythm(2 / 3),
    paddingTop: vr.rhythm(1 / 2),
    paddingBottom: 'calc(' + vr.rhythm(1 / 2) + ' - 1px)'
  });
  styles = setStyles(styles, 'th:first-child,td:first-child', {
    paddingLeft: 0
  });
  styles = setStyles(styles, 'th:last-child,td:last-child', {
    paddingRight: 0
  });

  // Create styles for headers.
  var baseFontSize = options.baseFontSize.slice(0, -2);
  styles = setStyles(styles, ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'], {
    color: (0, _grayPercentage2.default)(options.headerGray, options.headerGrayHue),
    fontFamily: options.headerFontFamily.join(','),
    fontWeight: options.headerWeight,
    textRendering: 'optimizeLegibility'
  });

  // Loop through each modular scale and add media query as necessary.
  (0, _forEach2.default)(options.modularScales, function (modularScale) {
    var maxWidth = modularScale.maxWidth;
    var scale = modularScale.scale;


    var h1 = vr.adjustFontSizeTo((0, _modularscale2.default)(5 / 5, scale) * baseFontSize + 'px');
    var h2 = vr.adjustFontSizeTo((0, _modularscale2.default)(4 / 5, scale) * baseFontSize + 'px');
    var h3 = vr.adjustFontSizeTo((0, _modularscale2.default)(3 / 5, scale) * baseFontSize + 'px');
    var h4 = vr.adjustFontSizeTo((0, _modularscale2.default)(2 / 5, scale) * baseFontSize + 'px');
    var h5 = vr.adjustFontSizeTo((0, _modularscale2.default)(1 / 5, scale) * baseFontSize + 'px');
    var h6 = vr.adjustFontSizeTo((0, _modularscale2.default)(0 / 5, scale) * baseFontSize + 'px');

    var media = void 0;
    if (maxWidth) {
      media = '@media only screen and (max-width:' + maxWidth + ')';
    }
    (0, _forEach2.default)([h1, h2, h3, h4, h5, h6], function (header, i) {
      if (media) {
        styles = (0, _set2.default)(styles, media + '.h' + (i + 1) + '.fontSize', header.fontSize);
        styles = (0, _set2.default)(styles, media + '.h' + (i + 1) + '.lineHeight', header.lineHeight);
      } else {
        styles = (0, _set2.default)(styles, 'h' + (i + 1) + '.fontSize', header.fontSize);
        styles = (0, _set2.default)(styles, 'h' + (i + 1) + '.lineHeight', header.lineHeight);
      }
    });
  });

  // Call overrideStyles function on options (if set).
  if ((0, _isFunction2.default)(options.overrideStyles)) {
    styles = (0, _merge2.default)(styles, options.overrideStyles(vr, options));
  }

  // Compile styles to string.
  var stylesStr = compileStyles(styles);
  stylesStr += '' + generateFontFaceRules(vr, options);

  if (options.includeNormalize) {
    stylesStr = '' + _typographyNormalize2.default + stylesStr;
  }

  return stylesStr;
};